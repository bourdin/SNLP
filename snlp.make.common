ifneq (PETSC_DIR,)
	#import PETSc rules and variables
	ifneq ($(wildcard ${PETSC_DIR}/lib/petsc/conf/.*),)
		# older than 3.5
		include ${PETSC_DIR}/lib/petsc/conf/variables
		include ${PETSC_DIR}/lib/petsc/conf/rules
	else ifneq ($(wildcard ${PETSC_DIR}/lib/petsc-conf/.*),)
		# newer than 3.5
		include ${PETSC_DIR}/lib/petsc-conf/variables
		include ${PETSC_DIR}/lib/petsc-conf/rules
	else
		# old PETSc
		include ${PETSC_DIR}/conf/variables
		include ${PETSC_DIR}/conf/rules
	endif
	LIBS := $(PETSC_LIB)
else
	LIBS := 
	CC := gcc
	CLINKER := gcc
	FC := gfortran
	FLINKER := gfortran
	LD_SHARED := gcc
	PETSCCFLAGS := ${CFLAGS}
endif

ifndef METHOD
	METHOD := dbg
endif

ifeq (METHOD,dbg)
	PETSCCFLAGS += -g
	PETSCFFLAGS += -g
else ifeq (METHOD,opt)
	PETSCCFLAGS += -O3
	PETSCFFLAGS += -O3
endif
# usefull variables and commands
srcfiles := $(wildcard src/*.c)
f_srcfiles := $(wildcard src/*.F90)
includefiles:= $(wildcard include/*.h)
allobj := $(wildcard obj/*.o)
modfiles := $(wildcard obj/*.mod)
obj-suffix := o
LIB_DIR	:= $(rootdir)/lib
INCLUDE_DIR := $(rootdir)/include
EXAMPLES_DIR := $(rootdir)/examples
OBJ_DIR	:= ${rootdir}/obj
OBJ_FILES := $(addprefix ${OBJ_DIR}/,$(notdir $(srcfiles:.c=.$(METHOD).$(obj-suffix))))
F_OBJ_FILES := $(addprefix ${OBJ_DIR}/,$(notdir $(f_srcfiles:.F90=.$(METHOD).$(obj-suffix))))

MKDIR_P	:= mkdir -p
EXAMPLE_FILES := $(EXAMPLES_DIR)/example1.c $(EXAMPLES_DIR)/example2.c $(EXAMPLES_DIR)/example2ctx.c
EXAMPLE_EXECS := $(EXAMPLES_DIR)/example1 $(EXAMPLES_DIR)/example2 $(EXAMPLES_DIR)/example2ctx
F_EXAMPLE_FILES := $(EXAMPLES_DIR)/example1F90.F90
F_EXAMPLE_EXECS := $(EXAMPLES_DIR)/example1F90
#detect the system type
ifeq ($(OS),Windows_NT)
	echo "WINDOWS DETECETED SELF DESTRUCTION IN 10 seconds!!!!"
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Linux)
		LIB_SUFFIX := so
		LIBLD := ${CLINKER} -shared -Wl,-soname,snlp.${LIB_SUFFIX}
	endif
	ifeq ($(UNAME_S),Darwin)
		LIBLD := ${LD_SHARED} -g -dynamiclib -single_module -multiply_defined suppress -undefined dynamic_lookup ${DARWIN_COMMONS_USE_DYLIBS}
		LIB_SUFFIX = dylib
	endif
endif